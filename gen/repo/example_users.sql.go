// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: example_users.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const createExampleUser = `-- name: CreateExampleUser :one
INSERT INTO example_users (name, level, created_at, updated_at)
VALUES ($1, 1, now(), now())
RETURNING id, name, level, created_at, updated_at
`

func (q *Queries) CreateExampleUser(ctx context.Context, name string) (ExampleUser, error) {
	row := q.db.QueryRow(ctx, createExampleUser, name)
	var i ExampleUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findExampleUserByID = `-- name: FindExampleUserByID :one
SELECT id, name, level, created_at, updated_at FROM example_users WHERE id = $1
`

func (q *Queries) FindExampleUserByID(ctx context.Context, id uuid.UUID) (ExampleUser, error) {
	row := q.db.QueryRow(ctx, findExampleUserByID, id)
	var i ExampleUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findExampleUserByLevel = `-- name: FindExampleUserByLevel :many
SELECT id, name, level, created_at, updated_at FROM example_users WHERE level = $1
`

func (q *Queries) FindExampleUserByLevel(ctx context.Context, level int32) ([]ExampleUser, error) {
	rows, err := q.db.Query(ctx, findExampleUserByLevel, level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExampleUser
	for rows.Next() {
		var i ExampleUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Level,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findExampleUserByName = `-- name: FindExampleUserByName :one
SELECT id, name, level, created_at, updated_at FROM example_users WHERE name = $1
`

func (q *Queries) FindExampleUserByName(ctx context.Context, name string) (ExampleUser, error) {
	row := q.db.QueryRow(ctx, findExampleUserByName, name)
	var i ExampleUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateExampleUserLevel = `-- name: UpdateExampleUserLevel :exec
UPDATE example_users SET level = $1 WHERE id = $2
`

type UpdateExampleUserLevelParams struct {
	Level int32     `json:"level"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateExampleUserLevel(ctx context.Context, arg UpdateExampleUserLevelParams) error {
	_, err := q.db.Exec(ctx, updateExampleUserLevel, arg.Level, arg.ID)
	return err
}
