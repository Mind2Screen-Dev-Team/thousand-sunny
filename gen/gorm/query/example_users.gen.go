// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Mind2Screen-Dev-Team/thousand-sunny/gen/gorm/model"
)

func newExampleUser(db *gorm.DB, opts ...gen.DOOption) exampleUser {
	_exampleUser := exampleUser{}

	_exampleUser.exampleUserDo.UseDB(db, opts...)
	_exampleUser.exampleUserDo.UseModel(&model.ExampleUser{})

	tableName := _exampleUser.exampleUserDo.TableName()
	_exampleUser.ALL = field.NewAsterisk(tableName)
	_exampleUser.ID = field.NewString(tableName, "id")
	_exampleUser.Name = field.NewString(tableName, "name")
	_exampleUser.Level = field.NewInt32(tableName, "level")
	_exampleUser.CreatedAt = field.NewTime(tableName, "created_at")
	_exampleUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_exampleUser.fillFieldMap()

	return _exampleUser
}

type exampleUser struct {
	exampleUserDo

	ALL       field.Asterisk
	ID        field.String
	Name      field.String
	Level     field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (e exampleUser) Table(newTableName string) *exampleUser {
	e.exampleUserDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exampleUser) As(alias string) *exampleUser {
	e.exampleUserDo.DO = *(e.exampleUserDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exampleUser) updateTableName(table string) *exampleUser {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.Name = field.NewString(table, "name")
	e.Level = field.NewInt32(table, "level")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *exampleUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exampleUser) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["level"] = e.Level
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
}

func (e exampleUser) clone(db *gorm.DB) exampleUser {
	e.exampleUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exampleUser) replaceDB(db *gorm.DB) exampleUser {
	e.exampleUserDo.ReplaceDB(db)
	return e
}

type exampleUserDo struct{ gen.DO }

type IExampleUserDo interface {
	gen.SubQuery
	Debug() IExampleUserDo
	WithContext(ctx context.Context) IExampleUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExampleUserDo
	WriteDB() IExampleUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExampleUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExampleUserDo
	Not(conds ...gen.Condition) IExampleUserDo
	Or(conds ...gen.Condition) IExampleUserDo
	Select(conds ...field.Expr) IExampleUserDo
	Where(conds ...gen.Condition) IExampleUserDo
	Order(conds ...field.Expr) IExampleUserDo
	Distinct(cols ...field.Expr) IExampleUserDo
	Omit(cols ...field.Expr) IExampleUserDo
	Join(table schema.Tabler, on ...field.Expr) IExampleUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExampleUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExampleUserDo
	Group(cols ...field.Expr) IExampleUserDo
	Having(conds ...gen.Condition) IExampleUserDo
	Limit(limit int) IExampleUserDo
	Offset(offset int) IExampleUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExampleUserDo
	Unscoped() IExampleUserDo
	Create(values ...*model.ExampleUser) error
	CreateInBatches(values []*model.ExampleUser, batchSize int) error
	Save(values ...*model.ExampleUser) error
	First() (*model.ExampleUser, error)
	Take() (*model.ExampleUser, error)
	Last() (*model.ExampleUser, error)
	Find() ([]*model.ExampleUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExampleUser, err error)
	FindInBatches(result *[]*model.ExampleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExampleUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExampleUserDo
	Assign(attrs ...field.AssignExpr) IExampleUserDo
	Joins(fields ...field.RelationField) IExampleUserDo
	Preload(fields ...field.RelationField) IExampleUserDo
	FirstOrInit() (*model.ExampleUser, error)
	FirstOrCreate() (*model.ExampleUser, error)
	FindByPage(offset int, limit int) (result []*model.ExampleUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExampleUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e exampleUserDo) Debug() IExampleUserDo {
	return e.withDO(e.DO.Debug())
}

func (e exampleUserDo) WithContext(ctx context.Context) IExampleUserDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exampleUserDo) ReadDB() IExampleUserDo {
	return e.Clauses(dbresolver.Read)
}

func (e exampleUserDo) WriteDB() IExampleUserDo {
	return e.Clauses(dbresolver.Write)
}

func (e exampleUserDo) Session(config *gorm.Session) IExampleUserDo {
	return e.withDO(e.DO.Session(config))
}

func (e exampleUserDo) Clauses(conds ...clause.Expression) IExampleUserDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exampleUserDo) Returning(value interface{}, columns ...string) IExampleUserDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exampleUserDo) Not(conds ...gen.Condition) IExampleUserDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exampleUserDo) Or(conds ...gen.Condition) IExampleUserDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exampleUserDo) Select(conds ...field.Expr) IExampleUserDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exampleUserDo) Where(conds ...gen.Condition) IExampleUserDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exampleUserDo) Order(conds ...field.Expr) IExampleUserDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exampleUserDo) Distinct(cols ...field.Expr) IExampleUserDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exampleUserDo) Omit(cols ...field.Expr) IExampleUserDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exampleUserDo) Join(table schema.Tabler, on ...field.Expr) IExampleUserDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exampleUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExampleUserDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exampleUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IExampleUserDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exampleUserDo) Group(cols ...field.Expr) IExampleUserDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exampleUserDo) Having(conds ...gen.Condition) IExampleUserDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exampleUserDo) Limit(limit int) IExampleUserDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exampleUserDo) Offset(offset int) IExampleUserDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exampleUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExampleUserDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exampleUserDo) Unscoped() IExampleUserDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exampleUserDo) Create(values ...*model.ExampleUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exampleUserDo) CreateInBatches(values []*model.ExampleUser, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exampleUserDo) Save(values ...*model.ExampleUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exampleUserDo) First() (*model.ExampleUser, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExampleUser), nil
	}
}

func (e exampleUserDo) Take() (*model.ExampleUser, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExampleUser), nil
	}
}

func (e exampleUserDo) Last() (*model.ExampleUser, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExampleUser), nil
	}
}

func (e exampleUserDo) Find() ([]*model.ExampleUser, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExampleUser), err
}

func (e exampleUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExampleUser, err error) {
	buf := make([]*model.ExampleUser, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exampleUserDo) FindInBatches(result *[]*model.ExampleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exampleUserDo) Attrs(attrs ...field.AssignExpr) IExampleUserDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exampleUserDo) Assign(attrs ...field.AssignExpr) IExampleUserDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exampleUserDo) Joins(fields ...field.RelationField) IExampleUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exampleUserDo) Preload(fields ...field.RelationField) IExampleUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exampleUserDo) FirstOrInit() (*model.ExampleUser, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExampleUser), nil
	}
}

func (e exampleUserDo) FirstOrCreate() (*model.ExampleUser, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExampleUser), nil
	}
}

func (e exampleUserDo) FindByPage(offset int, limit int) (result []*model.ExampleUser, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exampleUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exampleUserDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exampleUserDo) Delete(models ...*model.ExampleUser) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exampleUserDo) withDO(do gen.Dao) *exampleUserDo {
	e.DO = *do.(*gen.DO)
	return e
}
